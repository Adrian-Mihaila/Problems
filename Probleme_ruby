# sort the odd numbers in ascending order while leaving the even numbers at their original positions. [5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]
def sort_array(arr)
  odds = arr.select { |i| i.odd? }.sort
  ind = 0
  arr.map! do |x|
    if x.odd?
      x = odds[ind]
      ind += 1
    end
    x
  end
end

def sort_array(arr)
  odds = arr.select(&:odd?).sort
  arr.map { |num| num.odd? ? odds.shift : num }
end

arr = [5, 8, 6, 3, 4]
result = sort_array(arr)
puts result.inspect


# Remove vowels from string
def disemvowel(str)
  vowels = ["a","e","i","o","u","A", "E", "I", "O", "U"]
  (str.chars - vowels).join
end

def disemvowel(str)
  str.delete('aeiouAEIOU')
end


# Remove the first smallest element from array and keep the order. Do not mutate the original array/list. 
def remove_smallest(numbers)
  m = numbers.min
  ind = 0
  arr = numbers.dup  # Create a shallow copy of the original numbers array
  arr.each do |x|
    ind += 1
    if x == m
      arr.delete_at(ind-1)
      break
    end
  end
  arr
end

result = remove_smallest([2, 2, 1, 2, 1])
puts result.inspect

def remove_smallest(numbers)
  min_index = numbers.index(numbers.min)
  numbers.reject.with_index { |_, index| index == min_index }
end


# Splits the string into pairs of two characters. 'abcdefg' =>  ["ab", "cd", "ef", "g_"]. 
def solution(str)
  str = str.chars
  str << '_' if str.length.odd?
  str.each_slice(2).map(&:join)  ## &:method_name shorthand syntax, also known as Symbol#to_proc. It works by converting the symbol 
end                              ## :method_name into a Proc object and then passing that Proc object as the block to the method.


def solution str
  (str + '_').scan /../
end


# ([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) => returns "(123) 456-7890"
def create_phone_number(numbers)
  "(#{numbers.slice(0,3)})^#{numbers.slice(3,3)}-#{numbers.slice(-4,4)}".tr("[]"," ").delete(",").delete(" ").tr("^", " ")
end

def create_phone_number(numbers)
  "(%d%d%d) %d%d%d-%d%d%d%d" % numbers
end


# return string with input variable
def greet(name)
  "Hello, %s how are you doing today?" % name
end


# return min and max
def min(list)
list.sort[0]
end

def max(list)
 list.sort[-1]
end

def min(list)
min = list[0]
  list.each do |el|
    if el < min
      min = el
     end
  end
  return min
end

def max(list)
  max = list[0]
  list.each do |el|
    if el > max
      max = el
     end
  end
  return max
end


# check if arr contains element
# check([78, 117, 110, 99, 104, 117, 107, 115], 8)
def check(arr,element)
  arr.include? element
end

def check(arr,element)
#   return "x".to_i
  return arr.find(proc{false}){|e| e==element } == false ? false : true
end


# Return true if first and last char are equal for both elements
def feast(beast, dish)
  [0, -1].all? { |i| beast[i] == dish[i] }
end


# Count sheeps 1 sheep...2 sheep...3 sheep...
def count_sheep(num)
  i = ""
  (1..num).map {|x| i += "#{x} sheep..."}
  i
end


# sum of integers in an array
def sum(numbers)
  result = 0
  numbers.map {|x| result += x}
  result
end

def sum(numbers)
  numbers.reduce(:+) || 0
end


# Simple math operation. Return boolean
def zero_fuel(_,__,___) ___*__>=_ end 


# Smash! Concatenate array intro string
def smash(words)
  words * ' '
end
# ['hello', 'world', 'this', 'is', 'great']  =>  'hello world this is great'


# Count by X
# Create a function with two arguments that will return an array of the first n multiples of x.
def count_by(x, n)
  multiples = []
  (1..n).each do |i|
    multiples << x * i
  end
  multiples
end

def count_by(x, n)
  (1..n).map{|i| i*x}
end


# Keep Hydrated!
def litres(time)
  (time * 0.5).floor
end

def litres(time)
  (time.floor * 0.5).round(half: :down)
end

def litres(t)(t*0.5).floor end


# Fake Binary
# Given a string of digits, you should replace any digit below 5 with '0' and any digit 5 and above with '1'. Return the resulting string.
def fake_bin(s)
  i = ""
  s.chars.map { |x| x.to_i < 5 ? i+= "0" : i += "1" }
  i
end

def fake_bin(str)
  str.split('').map{ |x| x.to_i < 5 ? 0 : 1 }.join
end

def fake_bin(s)
  s.tr("123456789", "000011111")
end






